// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

enum EventCategory {
  CONCERTS
  SPORTS
  FESTIVALS
  ART
  CONFERENCES
  EXPOS
}

enum TransactionStatus {
  PENDING
  PAID
  CANCEL
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String        @db.LongText
  profile     String?       @db.LongText
  isActive    Boolean       @default(false)
  referral    String?       @unique
  isReedem    Boolean       @default(true)
  accountType String        @default("user")
  points      Int?
  Whishlist   Whishlist?
  Transaction Transaction[]
  Review      Review[]
  PointUser   PointUser[]
}

model Organizer {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  profilePicture String? @db.LongText
  password       String  @db.LongText
  profile        String? @db.LongText
  isActive       Boolean @default(false)
  accountType    String  @default("organizer")
  Event          Event[]
}

model Event {
  id            Int             @id @default(autoincrement())
  name          String
  startSale     DateTime        @default(now())
  eventDate     DateTime        @default(now())
  organizerId   Int
  date          DateTime        @default(now())
  price         Int
  category      EventCategory
  location      String
  stock         Int
  description   String?         @db.LongText
  slug          String          @unique
  organizer     Organizer       @relation(fields: [organizerId], references: [id])
  WhishlistItem WhishlistItem[]
  Promo         Promo[]
  Review        Review[]
}

model Whishlist {
  id            Int             @id @default(autoincrement())
  userId        Int             @unique
  user          User            @relation(fields: [userId], references: [id])
  WhishlistItem WhishlistItem[]
}

model WhishlistItem {
  id          Int       @id @default(autoincrement())
  whishlistId Int
  eventId     Int
  whistlist   Whishlist @relation(fields: [whishlistId], references: [id])
  event       Event     @relation(fields: [eventId], references: [id])
}

model Promo {
  id        Int         @id @default(autoincrement())
  eventId   Int
  event     Event       @relation(fields: [eventId], references: [id])
  PromoItem PromoItem[]
}

model PromoItem {
  id       Int      @id @default(autoincrement())
  name     String
  discount Int
  starDate DateTime
  endDate  DateTime
  promoId  Int
  promo    Promo    @relation(fields: [promoId], references: [id])
}

model Transaction {
  id            Int               @id @default(autoincrement())
  userId        Int
  eventId       Int
  quantity      Int
  promoItemId   Int
  totalDiscount Int
  total         Int
  grandTotal    Int
  status        TransactionStatus
  imageUrl      String?
  createdAt     DateTime          @default(now())
  user          User              @relation(fields: [userId], references: [id])
}

model Review {
  id      Int   @id @default(autoincrement())
  userId  Int
  eventId Int
  rating  Int
  review  Int
  user    User  @relation(fields: [userId], references: [id])
  event   Event @relation(fields: [eventId], references: [id])
}

model PointUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  point     Int      @default(10000)
  createdAt DateTime @default(now())
  expireAt  DateTime
  isRedeem  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}
